[project]
name = "geh-settlement-report"
version = "1.0.0"
description = "Library for creating settlement reports"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "configargparse==1.5.3",
    "pyspark==3.5.3",
    "delta-spark==3.3.0",
    "python-dateutil==2.8.2",
    "azure-monitor-opentelemetry==1.6.7",
    "azure-core==1.30.0",
    "geh_common @ git+https://git@github.com/Energinet-DataHub/opengeh-python-packages@e14eec8f437d26cf76f56a928cbf71aafd3fc1bf#subdirectory=source/geh_common",
]

[project.scripts]
create_hourly_time_series = "geh_settlement_report.settlement_reports.entry_point:start_hourly_time_series_points"
create_quarterly_time_series = "geh_settlement_report.settlement_reports.entry_point:start_quarterly_time_series_points"
create_metering_point_periods = "geh_settlement_report.settlement_reports.entry_point:start_metering_point_periods"
create_charge_links = "geh_settlement_report.settlement_reports.entry_point:start_charge_link_periods"
create_charge_price_points = "geh_settlement_report.settlement_reports.entry_point:start_charge_price_points"
create_energy_results = "geh_settlement_report.settlement_reports.entry_point:start_energy_results"
create_monthly_amounts = "geh_settlement_report.settlement_reports.entry_point:start_monthly_amounts"
create_wholesale_results = "geh_settlement_report.settlement_reports.entry_point:start_wholesale_results"
create_zip = "geh_settlement_report.settlement_reports.entry_point:start_zip"

execute_measurements_report = "geh_settlement_report.measurements_reports.entry_point:start_measurements_report"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[dependency-groups]
dev = [
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "ruff>=0.9.1",
    "pytest-xdist>=3.6.1",
]

[tool.pytest.ini_options]
# -s ensures that print("<text>") is written to output.
addopts = [
    "--import-mode=importlib",
    "--cov-report=term",
    "--cov-report=xml:coverage.xml",
    "--cov=geh_settlement_report",
    "-ra",
    "-vv",
    "-s",                            # -s ensures that print("<text>") is written to output.
    # pytest-xdist options
    #   See https://pytest-order.readthedocs.io/en/stable/other_plugins.html#usage-with-pytest-xdist
    "-n=auto",
    "--dist=worksteal",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.ruff]
line-length = 120
show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["D", "D401", "E", "F", "I", "T201", "UP"]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D106",
    "D107",
    "D417",
    "E501",
    "UP006",
    "UP007",
    "UP035",
    "T201",  # We want to use `print` for debugging
]
exclude = ["notebooks/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "UP"]

[tool.ruff.lint.pydocstyle]
convention = "google"
